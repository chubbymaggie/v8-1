/*
 * We process the log file generated by V8 --trace-*-internals.
 * We do visualize and data mining on the log file.
 * By richardxx, 2013.7
 */

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <unistd.h>
#include "options.h"
#include "sm-builder.hh"


const char* input_file = NULL;
const char* visual_file = NULL;
int slice_sig = -1;
int states_count_limit = 14;


static int 
parse_options(int argc, char** argv)
{
  int c;
  
  while ( (c = getopt(argc, argv, "c:v:s:h") ) != -1 ) {
    switch(c) {
    case 'c':
      states_count_limit = atoi(optarg);
      break;
      
    case 'v':
      visual_file = optarg;
      break;
      
    case 's':
      sscanf( optarg, "%x", slice_sig );
      break;

    case 'h':
      printf( "Usage: %s [options] input_file\n", argv[0] );
      printf( "Options:\n");
      printf( "-c [default=4]       : Only machines have more than specified states and edges are visualized.\n" );
      printf( "-v [file]            : Output graphviz file for visualization\n" );
      printf( "-s [signature]       : Output a log slice of specified function/object\n" );
      printf( "-h        : Print this help.\n" );
      break;
    }
  }

  if ( optind == argc ) {
    printf( "Missing input file. Aborted.\n" );
    return 0;
  }

  input_file = argv[optind];
  return 1;
}


int main(int argc, char** argv)
{
  if ( parse_options(argc, argv) == 0 )
    return -1;
  
  if ( !build_automata(input_file) ) {
    printf( "Error in building automata, stop.\n" );
    return -1;
  }
  
  if ( visual_file != NULL ) {
    char f_buf[256];
    sprintf( f_buf, "%s-final", visual_file );
    visualize_machines(f_buf);
  }
  
  clean_machines();

  return 0;
}
